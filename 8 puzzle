def print_in_format(matrix):
    for i in range(9):       
        if i%3 == 0 and i > 0:

            print("")
        print(str(matrix[i])+" ", end = "")
def count(s):
    #heuristic value counting variable

    c = 0
    #Solved state of a 8 puzzle

    ideal = [1, 2, 3,

             4, 5, 6,

             7, 8, 0]

    for i in range(9):

        if s[i] != 0 and s[i] != ideal[i]:

            c += 1
    #return the counted heuristic value    

    return c

def move(ar, p, st):

        rh = 999999
    #Copy the puzzle state to another list variable to be used in here

    store_st = st.copy()
    #Loop that makes moves of blank tiles to all possible positions

    for i in range(len(ar)):
              dupl_st = st.copy()

        #swapping the blank tile

        temp = dupl_st[p]

        dupl_st[p] = dupl_st[arr[i]]

        dupl_st[arr[i]] = temp

        #counting the heuristic value for swaped puzzle state

        tmp_rh = count(dupl_st)   
        if tmp_rh < rh:

            rh = tmp_rh

            store_st = dupl_st.copy()

    #return the state with the minimum heuristic value along with the heuristic value

    return store_st, rh

#Unsolved 8 Puzzle stored in list 'state'

state = [1, 2, 3, 

         0, 5, 6,

         4, 7, 8]

#variable that stores the heuristic value

h = count(state)

#Keeps track of search levels

Level = 1

#initial printing of current state of 8 puzzle

print("\n------ Level "+str(Level)+" ------")

print_in_format(state)

print("\nHeuristic Value(Misplaced) : "+str(h))

#The main loop to find the solution and printing every search level

while h>0:

    #Store the position of the blank tile labeled '0' in the list 'state' 

    pos = int(state.index(0))

    Level += 1

    if pos == 0:

        arr = [1, 3]

        state, h = move(arr, pos, state)

    elif pos == 1:

        #array of indexes where blank tile can be moved

        arr = [0, 2, 4]

        state, h = move(arr, pos, state)

    #if blank tile is in index 2, then possible movement operation    

    elif pos==2:

        #array of indexes where blank tile can be moved

        arr = [1, 5]

        state, h = move(arr, pos, state)

    #if blank tile is in index 3, then possible movement operation

    elif pos==3:

        #array of indexes where blank tile can be moved

        arr = [0, 4, 6]

        state, h = move(arr, pos, state)

    #if blank tile is in index 4, then possible movement operation

    elif pos==4:

        #array of indexes where blank tile can be moved

        arr = [1, 3, 5, 7]

        state, h = move(arr, pos, state)

        #if blank tile is in index 5, then possible movement operation

    elif pos==5:

        #array of indexes where blank tile can be moved

        arr = [2, 4, 8]

        state, h = move(arr, pos, state)

    #if blank tile is in index 6, then possible movement operation

    elif pos==6:

        #array of indexes where blank tile can be moved

        arr = [3, 7]

        state, h = move(arr, pos, state)

    #if blank tile is in index 7, then possible movement operation

    elif pos==7:

        #array of indexes where blank tile can be moved

        arr = [4, 6, 8]

        state, h = move(arr, pos, state)      

    #if blank tile is in index 8, then possible movement operation

    elif pos==8:

        #array of indexes where blank tile can be moved

        arr = [5, 6]

        state, h = move(arr, pos, state) 

    print("\n------ Level "+str(Level)+" ------")

    print_in_format(state)

    print("\nHeuristic Value(Misplaced) : "+str(h))
